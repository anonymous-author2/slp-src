<?xml version="1.0"?>
<launch>
    <arg name="rgb_point_cloud" default="true"/>
    <arg name="with_utils" default="true"/>
    <arg name="use_static_cloud" default="false"/>
    <arg name="local_kinect" default="false"/>
    <arg name="only_virtual" default="true"/>
    <arg name="with_rviz" default="$(arg only_virtual)"/>
    <arg name="use_fake_kinect" default="$(arg only_virtual)"/>
    <arg name="record" default="false"/>
    <arg name="bridge" default="false"/>

    <group if="$(arg use_static_cloud)">
        <node pkg="slp" type="static_publisher" name="camera_static_publisher">
            <param name="file_name" type="string" value="transforms.yaml" />
            <param name="transform" type="string" value="static_cloud_transform" />
        </node>

        <node pkg="slp" type="pc_publish" name="pc_publish"/>
    </group>

    <node pkg="slp" type="static_publisher" name="internal_camera_static_publisher">
        <param name="file_name" type="string" value="transforms.yaml" />
        <param name="transform" type="string" value="internal_camera_transform" />
    </node>

    <group if="$(arg only_virtual)">
        <node pkg="slp" type="static_publisher" name="panda_gripper_static_publisher">
            <param name="file_name" type="string" value="transforms.yaml" />
            <param name="transform" type="string" value="sim_robot_transform" />
        </node>

        <node pkg="slp" type="simulator" name="simulator" output="screen">
            <param name="use_relaxed_ik" type="bool" value="false" />
            <param name="only_virtual" value="$(arg only_virtual)" />
        </node>
        
        <!-- startup rviz -->
        <node pkg="slp" type="rviz_manager" name="rviz_manager">
            <param name="only_virtual" value="$(arg only_virtual)" />
        </node>
    </group>
    
    <group unless="$(arg only_virtual)">
        <group if="$(arg with_rviz)">
            <!-- startup rviz -->
            <node pkg="slp" type="rviz_manager" name="rviz_manager">
                <param name="only_virtual" value="$(arg only_virtual)" />
            </node>
        </group>
    </group>
    
    <group unless="$(arg use_fake_kinect)">
        <node pkg="slp" type="static_publisher" name="rgb_camera_static_publisher">
            <param name="file_name" type="string" value="transforms.yaml" />
            <param name="transform" type="string" value="rgb_camera_transform" />
        </node>
        <node pkg="slp" type="cloud_filter" name="cloud_filter"/>

    </group>

    <group if="$(arg use_fake_kinect)">
        <node pkg="slp" type="static_publisher" name="rgb_camera_static_publisher">
            <param name="file_name" type="string" value="transforms.yaml" />
            <param name="transform" type="string" value="fake_camera_transform" />
        </node>

        <node pkg="slp" type="static_publisher" name="camera_static_publisher">
            <param name="file_name" type="string" value="transforms.yaml" />
            <param name="transform" type="string" value="static_cloud_transform" />
        </node>

        <node pkg="slp" type="pc_publish" name="pc_publish"/>
    </group>

    <include file="$(find slp)/launch/virtual_camera.launch">  
        </include>
        
    <include file="$(find slp)/launch/joint_state_pub.launch">  
        <arg name="only_virtual" value="$(arg only_virtual)" />
    </include>

    <group if="$(arg with_utils)">
        <include file="$(find slp)/launch/utils.launch">  
            <arg name="only_virtual" default="$(arg only_virtual)"/>
        </include>
    </group>

    <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch">  
    </include>

    <node pkg="slp" type="static_publisher" name="sim_ee_static_publisher">
        <param name="file_name" type="string" value="transforms.yaml" />
        <param name="transform" type="string" value="sim_ee_transform" />
    </node>
</launch>
